# üöÄ Streamlit Meme Generator - Deployment Guide

## üìã Prerequisites

- Python 3.8+
- Supabase account
- Groq API account (optional, for AI features)
- Git

## üõ†Ô∏è Setup Instructions

### 1. Clone and Setup Environment

```bash
# Clone the repository
git clone <your-repo-url>
cd meme_generator

# Create virtual environment
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate

# Install dependencies
pip install -r requirements.txt
```

### 2. Supabase Configuration

#### Create Supabase Project
1. Go to [supabase.com](https://supabase.com) and create a new project
2. Wait for the project to be fully initialized
3. Go to Settings > API to get your credentials

#### Setup Database
1. Go to SQL Editor in your Supabase dashboard
2. Copy and paste the entire `database_setup.sql` file
3. Execute the SQL to create all tables, functions, and policies

#### Configure Authentication
1. Go to Authentication > Settings
2. Enable Email authentication
3. Configure site URL to your domain (for production)
4. Set up email templates if desired

### 3. Environment Variables

Create a `.env` file in the root directory:

```bash
# Copy from .env.example
cp .env.example .env
```

Fill in your credentials:

```env
# Supabase Configuration
SUPABASE_URL=https://your-project.supabase.co
SUPABASE_KEY=your_anon_key_here
SUPABASE_SERVICE_KEY=your_service_key_here

# AI API Configuration  
GROQ_API_KEY=your_groq_api_key_here

# App Configuration
APP_ENV=production
DEBUG_MODE=false
MAX_FILE_SIZE_MB=10
ALLOWED_EXTENSIONS=png,jpg,jpeg,gif,webp
```

### 4. Get API Keys

#### Groq API (for AI captions)
1. Visit [console.groq.com](https://console.groq.com)
2. Sign up and create an API key
3. Add to your `.env` file

### 5. Local Development

```bash
# Run the app locally
streamlit run app.py

# The app will be available at http://localhost:8501
```

### 6. Add Default Meme Templates (Optional)

Create the `static/default_memes/` directory and add popular meme templates:

```bash
mkdir -p static/default_memes
# Add image files like drake.jpg, distracted_boyfriend.jpg, etc.
```

## üåê Production Deployment

### Option 1: Streamlit Cloud (Recommended)

1. **Prepare Repository**
   ```bash
   # Ensure all files are committed
   git add .
   git commit -m "Initial meme generator setup"
   git push origin main
   ```

2. **Deploy on Streamlit Cloud**
   - Go to [share.streamlit.io](https://share.streamlit.io)
   - Connect your GitHub repository
   - Select `app.py` as the main file
   - Add environment variables in the advanced settings
   - Deploy!

3. **Configure Supabase for Production**
   - Update site URL in Supabase auth settings
   - Configure CORS if needed
   - Set up proper email templates

### Option 2: Heroku Deployment

1. **Create Heroku App**
   ```bash
   # Install Heroku CLI
   heroku create your-meme-generator-app
   ```

2. **Add Buildpack**
   ```bash
   heroku buildpacks:add heroku/python
   ```

3. **Create Procfile**
   ```
   web: sh setup.sh && streamlit run app.py --server.port=$PORT --server.address=0.0.0.0
   ```

4. **Create setup.sh**
   ```bash
   mkdir -p ~/.streamlit/
   echo "\
   [general]\n\
   email = \"your-email@domain.com\"\n\
   " > ~/.streamlit/credentials.toml
   echo "\
   [server]\n\
   headless = true\n\
   enableCORS=false\n\
   port = $PORT\n\
   " > ~/.streamlit/config.toml
   ```

5. **Set Environment Variables**
   ```bash
   heroku config:set SUPABASE_URL=your_supabase_url
   heroku config:set SUPABASE_KEY=your_supabase_key
   heroku config:set GROQ_API_KEY=your_groq_key
   ```

6. **Deploy**
   ```bash
   git push heroku main
   ```

### Option 3: Docker Deployment

1. **Create Dockerfile**
   ```dockerfile
   FROM python:3.9-slim

   WORKDIR /app
   COPY requirements.txt .
   RUN pip install -r requirements.txt

   COPY . .

   EXPOSE 8501

   HEALTHCHECK CMD curl --fail http://localhost:8501/_stcore/health

   ENTRYPOINT ["streamlit", "run", "app.py", "--server.port=8501", "--server.address=0.0.0.0"]
   ```

2. **Create docker-compose.yml**
   ```yaml
   version: '3.8'
   services:
     meme-generator:
       build: .
       ports:
         - "8501:8501"
       environment:
         - SUPABASE_URL=${SUPABASE_URL}
         - SUPABASE_KEY=${SUPABASE_KEY}
         - GROQ_API_KEY=${GROQ_API_KEY}
       volumes:
         - ./static:/app/static
   ```

3. **Deploy**
   ```bash
   docker-compose up -d
   ```

## üìä Post-Deployment Setup

### 1. Create Admin User
After deployment, create the first admin user through the app interface.

### 2. Add Sample Content
- Upload some sample meme templates
- Create a few test memes
- Test all features (creation, likes, comments, etc.)

### 3. Configure Monitoring
- Set up Supabase monitoring
- Configure error tracking (optional)
- Monitor API usage for Groq

### 4. Performance Optimization
- Enable Supabase connection pooling
- Configure caching in Streamlit
- Optimize image handling

## üîí Security Checklist

- [ ] Environment variables properly set
- [ ] Supabase RLS policies enabled
- [ ] API keys secured and not in code
- [ ] File upload validation working
- [ ] User authentication functioning
- [ ] CORS configured correctly

## üêõ Troubleshooting

### Common Issues

**1. Database Connection Error**
- Check Supabase URL and keys
- Verify database setup completed
- Check network connectivity

**2. Authentication Not Working**
- Verify Supabase auth configuration
- Check site URL settings
- Confirm email settings

**3. AI Captions Not Working**
- Check Groq API key
- Verify API quota/limits
- Fallback captions should still work

**4. Images Not Displaying**
- Check file upload limits
- Verify image encoding/decoding
- Check browser console for errors

### Debug Mode
Enable debug mode in `.env`:
```env
DEBUG_MODE=true
```

### Logs
Check application logs:
```bash
# Streamlit Cloud: Check logs in dashboard
# Heroku: heroku logs --tail
# Docker: docker-compose logs -f
```

## üìà Scaling Considerations

### Database Optimization
- Add indexes for frequently queried columns
- Implement database cleanup for old data
- Consider read replicas for high traffic

### File Storage
- Move to proper file storage (AWS S3, Supabase Storage)
- Implement CDN for static assets
- Add image compression

### Performance
- Implement Redis caching
- Add rate limiting
- Optimize database queries
- Use connection pooling

## üîÑ Updates and Maintenance

### Regular Tasks
- Update dependencies monthly
- Monitor database size
- Check API usage limits
- Backup database regularly
- Update meme templates

### Version Updates
```bash
# Update dependencies
pip install --upgrade -r requirements.txt

# Test thoroughly before deploying
streamlit run app.py

# Deploy updates
git add .
git commit -m "Update dependencies"
git push origin main
```

## üìû Support

### Resources
- [Streamlit Documentation](https://docs.streamlit.io)
- [Supabase Documentation](https://supabase.com/docs)
- [Groq API Documentation](https://console.groq.com/docs)

### Getting Help
1. Check the troubleshooting section
2. Review application logs
3. Test with minimal configuration
4. Check API status pages

## üéâ Features Checklist

Verify all features work after deployment:

- [ ] User registration/login
- [ ] Meme creation with custom text
- [ ] Image upload and templates
- [ ] AI caption generation
- [ ] Like and comment system
- [ ] User profiles and stats
- [ ] Leaderboard functionality  
- [ ] Badge system
- [ ] Gallery with sorting/filtering
- [ ] Responsive design
- [ ] File download
- [ ] Social sharing (if implemented)

## üöÄ Going Live

### Pre-Launch
1. Test all functionality thoroughly
2. Add sample content and users
3. Configure domain (if custom)
4. Set up analytics (optional)
5. Prepare user documentation

### Launch
1. Share the application URL
2. Monitor initial usage
3. Be ready to address issues quickly
4. Gather user feedback

### Post-Launch
1. Monitor performance and errors
2. Collect user feedback
3. Plan feature improvements
4. Scale as needed

---

**Congratulations! Your Streamlit Meme Generator is now live! üé≠‚ú®**

For additional features or customization, refer to the individual utility files and extend as needed.